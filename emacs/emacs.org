#+TITLE: GNU Emacs Manual - Notes

GNU Emacs Manual

17th Edition - Emacs version 26.0.60


* Preface

- Documents the *use* and *simple customization* of the Emacs editor.
(Simple customization do not require you to be a programmer)

- Primarily a *reference manual*.
(Can also be used as a *primer*)

- The integrated learn-by-doing *tutorial* should be read *before* this manual.

| Key     | Command              | Description        |
|---------+----------------------+--------------------|
| =C-h t= | =help-with-tutorial= | Run the *tutorial* |


- Chapters reading:

|         Chapter | Description                                                                                                            |
|-----------------+------------------------------------------------------------------------------------------------------------------------|
|             1-2 | Manual *notational conventions* & *general appearance* of the Emacs display screen. (skim)                             |
|               4 | *Practice* commands shown.                                                                                             |
|              5+ | *Fundamental techniques and concepts* constantly used. (Need to be understood *thoroughly* so *practice until fluent*) |
|           14-19 | *Intermediate-level features* useful for many kinds of editing.                                                        |
|             20+ | *Optional features* (but useful). (Read when needed)                                                                   |
| Common Problems | When Emacs is *not working* properly. (How to cope with several problems & reporting bugs)                             |
|           Index | *Documentation of a particular command*. (*Keys* and *commmand names* have separated indexes)                          |
|        Glossary | Brief *dictionary of common terms*. (with cross-references)                                                            |


- Also available as *printed book* and *Info file*
(Info file can be read within Emacs or with info program)
(All manuals contain the *same content* inpendently from their format since they are generated from the *same source files* (also distributed with Emacs))

_Info is the principal format for documentation in the GNU system_

_GNU Emacs is a member of the Emacs editor family_
(There many Emacs editor, all sharing common principles of organization)

- Information on the underlying philosophy of Emacs and lessons learned from its development:
[[http://hdl.handle.net/1721.1/5736][Emacs, the Extensible, Customizable Self-Documenting Display Editor]]

- This manual is mainly intended for use with *GNU and Unix systems*.
(Emacs can also be used on MS-DOS, Microsoft Windows and Macintosh systems)
(The Info file version of this manual contains more information about using Emacs on those systems)
(Those systems use different file name syntax)
(MS-DOS does not support all GNU Emacs features)
(See dedicated Appendices)


* Distribution

_GNU Emacs is free software_
- Everyone is *free to use it* and *free to redistribute it* under certain conditions.
(*Not in the public domain*: copyrighted and there are restrictions on its distribution)
(Restrictions designed to *permit everything that a good cooperating citizen would do*)
(What is not allowed is to *try to prevent others form further sharing* any version of GNU Emacs)

- More precisions are found in the *GNU General Public License* included with Emacs.
(This manual is covered by the *GNU Free Documentation License*)
(Similar to the GPL, but more suitable for documentation)

_Getting a copy of GNU Emacs:_
- *From someone else who has it* (no permission needed, *just copy it*). (E.g., anonymous FTP)
- *When you buy a computer* (manufacturers are under the same terms that apply to everyone else).
(They are required to give you the *full sources*, including whatever *changes* they may have made, and permit you to *redistribute it*).

_The program must be free for you when you get it, not just free for the manufacturer_

[[https://www.gnu.org/software/emacs][More information on GNU Emacs]] (and info on getting it).

- Donations are made to the *Free Software Fundation* and are *tax deductible* in the US.
- Hardcopy versions of several GNU manual can also be bought on the [[https://shop.fsf.org][FSF online store]].

The income from sales serves the main foundation's purpose:
_the development of new free software, and improvements to existing programs_

Contact the FSF:
- [[https://www.fsf.org/about/contact/][Contact page]]
- Postal address:

Free Software Foundation
51 Franklin Street, Fifth Floor
Boston, MA 02110-1301
USA


* Acknowledgements


* Introduction

_GNU Emacs, the GNU incarnation of the advanced, self-documenting, customizable, extensible editor Emacs_
('G' in GNU's Not Unix is not silent)

- *Advanced*
  - Can do much more than simple *insertion* and *deletion* of text.
    (E.g., control subprocesses, indent programs automatically, show multiple files at once)
  - Editing commands operate in terms of *characters*, *words*, *lines*, *sentences*, *paragraphs*, and *pages*
as well as expressions and comments in various programming languages.

- *Self-documenting*
  - You can use *help commands* at any time (= special commands) to find out:
    - What your *options* are.
    - What any *special command* does.
    - *All the commands* that pertain a given topic.

- *Customizable*
  - *Altering the behavior* of Emacs commands is easy.
    (E.g., you can tell Emacs comment manipulation commands to use any given strings for comments for a programming language)
    (E.g., you can rebind the basic cursor motion commands to any keys on the keyboard that you find confortable)

- *Extensible*
  - Can go beyond *simple customization* and create entirely *new commands* (i.e., programs written in the *Lisp* language run by Emacs's own Lisp interpreter).
  - Existing commands can even be *redefined in the middle of an editing session*, without having to restart Emacs.
  - Writing an extension is *programming*, but non-programmers can use it afterwards.

_Most Emacs commands are written in Lisp but some use C instead for efficiency_

See Section "Preface" in [[https://www.gnu.org/software/emacs/manual/eintr.html][An Introduction to Programming in Emacs Lisp]] if you want to learn *Emacs Lisp* programming.


* The Organization of the Screen

|                                    | Graphical display  | Text terminal          |
|------------------------------------+--------------------+------------------------|
| (A) /frame/ (i.e., place occupied) | A graphical window | Entire terminal screen |

- Emacs starts with one frame, but additional frames can be created.

- Frame regions:

| Region name      | Emplacement                          | Description                                                                                                                                         | On graphical display? | On text terminal? |
|------------------+--------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------+-------------------|
| (A) /menu bar/   | Very top of the /frame/              | *Access commands* via series of menus                                                                                                               | Yes                   | Yes               |
| (A) /tool bar/   | Below the /menu bar/                 | A row of icons that *perform editing commands* when clicked                                                                                         | Yes                   | No                |
| (An) /echo area/ | Very bottom of the /frame/           | Where *informative messages* are displayed + Where you *enter information* when Emacs asks for it (in the /minibuffer/)                             | Yes                   | Yes               |
| (A) /window/     | Below the /tool bar/ (if one exists) | *Main area* of the frame + Where the *buffer* (i.e., the text you are editing) is displayed                                                         | Yes                   | Yes               |
| (A) /scroll bar/ | Very right of each /window/          | Can be used to *scroll through the displayed buffer*                                                                                                | Yes                   | No                |
| (A) /mode line/  | Last line of each /window/           | *Displays various information* about what is going on in the buffer (e.g., unsaved changed, editing modes that are in use, the current line number) | Yes                   | Yes               |

- Graphical display system commonly use the word "window" with a *different meaning*, but in Emacs they are refered as "frame".
- Each region should be designated with "a" instead of "the" (i.e., each of them is not necesarily unique).

- When Emacs is started, there is normally *one window in the frame*.
- This window can be subdivided *horizontally* or *vertically*.
(Each of which can *independently display a buffer* (even the same one))

- At any time, *one window is the selected window*.
  - On /graphical display/: shown with a *more prominent cursor* (usually solid and blinking); other windows show a *less prominent cursor* (usually a hollow box).
  - On /text terminal/: there is *only one cursor*, which is shown in the selected window.

- The buffer displayed in the selected window is called the *current buffer* \rightarrow _this is where editing happens_.

_Most Emacs commands implicitly apply to the current buffer_
(The text displayed in *unselected windows* is mostly visible for reference)

- When using multiple frames (\implies using a graphical display), _selecting a particular frame selects a window in that frame_.


** Point

- _Point: the location where most editing commands take place_
(The term "point" comes from the character '.', which was the command in *TECO* for accessing editing position)
(TECO (Text Editor and Corrector) is the language in which the original Emacs was written in)

_Cursor \neq Point_ \rightarrow _The cursor shows where the point is_

- Many Emacs commands *move point to different places in the buffer*.
(E.g., mouse button 1 (normally the left button) place point where the mouse cursor is)

- By default, the *cursor* is drawn as a *solid block* and appears to be *on a character* \rightarrow but the *point* is in fact *between two characters*.
(it is situated /before/ the character under the cursor)

#+BEGIN_EXAMPLE
f r [o] b
   ^ ^
   | cursor position
point position
#+END_EXAMPLE

_The cursor remains over the same character before and after inserting characters_
(whether it is a *normal character* or the *EOL*)


- _Each buffer has its own value of point_
- _A buffer that is not currently displayed remembers its value of point if you later display it back__
- _If a same buffer is displayed in multiple windows, each of those windows has its own value of point_


** The Echo Area

- _The echo area is so-named because one of its use is echoing_ (i.e., displaying the characters of a *multi-character command* as you type)
  - _Single-character commands are not echoed_
  - _Characters typed so far for a multi-character command echoed if pause > 1 sec_ (to prompts you for the rest)
  - _Once echoing has started, the rest of the command echoes *immediately* as you type_ \rightarrow Behavior designed to give *confident users fast reponses* and *hesitant users maximum feedback*

- Echo area also displays /error messages/ when a command cannot do its job.
(Error messages may be accompanied by beeping or flashing the screen)


- Some commands display /informative messages/ in the echo area \rightarrow Telling you what the command has done or to provide you with specific information.
- (No beep or flash)

| Key     | Description                                                                                        |
|---------+----------------------------------------------------------------------------------------------------|
| =C-x == | *Describe character at point*, its *position in the buffer* and its *current column in the window* |


- E.g., =C-x == displays it output in the echo area.

- Commands that take a long time often display *messages ending in '...'* while they are working \rightarrow Display 'done' when they are finished.
(+ how much progress sometimes (as a percentage))

- *Informative echo area messages* are saved in a special buffer named =*Message*= \rightarrow Useful to see a *missed message* or simply *message history*
(=*Message*= buffer is limited to a certain number of lines specified by the =message-log-max= variable)
(The oldest line is deleted whenever a new line is added at the end)

| Key     | Description                                                 |
|---------+-------------------------------------------------------------|
| =C-h e= | Go to the =*Messages*= buffer which logs echo-area messages |


- The echo area is also used to display the /minibuffer/ \rightarrow I.e., a special window where you can input arguments to commands (e.g., the name of a file to be edited))
- When the minibuffer is in use, the text of the echo area begins with a /prompt string/ and it *becomes temporarily the selected window* (\implies the cursor appears within the minibuffer).

\rightarrow You can always get out of the minibuffer by typing =C-g=



** The Mode Line

- _Describe what is going on in the current buffer_
(When only one window: *next-to-last line* in the frame; right above the echo area)
(On a graphical display, the mode line is drawn with a 3D box appearance)
- The mode line of the selected window is usually drawn with a different color than that of the unselected windows \rightarrow Make the selected window stand out


_Format of the text displayed in the mode line:_

#+BEGIN_EXAMPLE
cs:ch-fr  buf      pos line   (major minor)
#+END_EXAMPLE

(_On text terminal only:_ there is a *series of dashes* after this text extending to the right edge of the window)


- =cs:= describe the *character set* and *newline convention* used for the *current buffer*.
  - (Normally, Emacs *automatically handles these settings* \right arrow But it is sometimes useful to have this information)

  - =-=: *no special character set* handling (with the possible exception of end-of-line conventions)
  - ===: *no conversion* whatsoever \rightarrow Usually for files with non-textual data
  - Other characters represents various /coding systems/ (e.g., '1' represents ISO Latin-1, 'U' represents UTF-8)

  - (_On text terminal only:_ cs is preceded by two additional characters: *coding systems* for *keyboard input* and *terminal output*)
  - (+ another character if using an /input method/ (IME))

- If the character after =cs= \neq =:= \rightarrow *nontrivial end-of-line convention* for encoding a file.
  - Usually, lines of text are separated by /newline characters/ in a file \rightarrow Represented by =:= (or =(Unix)= on some systems)
  - But 2 other conventions are sometimes used:
    - MS-DOS, =\= (or =(DOS)= depending on the OS): *carriage-return character* + *linefeed character*
    - =/= (or =(Mac)= depending on the OS): *carriage-return character* \rightarrow Employed by older Macintosh systems only

- On frames created for =emacsclients=, the next character is =@= \rightarrow Typical for frames of an Emacs process running as a /daemon/.

- =ch= indicates *changes* of the displayed buffer:
  - =--=: the buffer is *unmodified* \rightarrow I.e., the displayed buffer has the same contents as the corresponding file on the disk
  - =**=: the buffer is *modified*

  - =%%=: *read-only* buffer *unmodified*
  - =%*=: *read-only* buffer *modified*

- The next character is normally =-=; except if the *default-directory* for the current buffer is on a remote machine: =@=

- (_On text terminal only:_ =fr= is the *selected frame name*)
  - (The inital frame's name is =F1=)

- =buf= is the *name of the buffer* displayed in the window \rightarrow Usually it is the same as the name of file on disk.

- =pos= tells you if there is additional text *above the top of the window* or *below the bottom*:
  - =All=: indicates that *all of the buffer is visible* \rightarrow The buffer is small.
  - =Top=: indicates that you are looking at the *beginning of the buffer*.
  - =Bot=: indicates that you are looking at the *end of the buffer*.
  - =nn%=: where =nn= is the *percentage of the buffer above the top of the window*.
  - (With *Size Indication mode*, you can display the size of the buffer as well)

- =line= is the character =L= followed by the *line number at point*
  - (With *Column Number mode* you can display the current column number as well)

- =major= is the name of the /major mode/ used in the buffer \rightarrow I.e., a *principal editing* mode for the buffer (e.g., Text mode, Lisp mode, C mode).
  - (*Additional information* can be displayed after the major mode name (e.g., Compilation buffers and Shell buffers display the *status of the subprocess*).

- =minor= is a list of some of the enabled /minor modes/ used in the buffer \rightarrow I.e., optional editing modes that provide *additional features* on top of the major mode.
  - (Some features are listed with the minor modes whenever they are turned on, even though *they are not really minor modes*)
  - (E.g., =Narrow= means that the displayed buffer has *editing restricted to only a portion of its text*, =Def= means that a *keyboard macro is being defined*)

- If Emacs is inside a *recursive editing level*, =[...]= (square brackets) appear around the =(...)= (parentheses) that surround the modes.
  - (If Emacs is one recursive editing level within another: *double square brackets* (and so on))
  - (Such square brackets appear in the *mode line of every window* since recursive editing levels affect Emacs globally)


- The *appearance of the mode line* and the *format of its content* can be customized.
  - (In addition, the mode line is *mouse-sensitive*: clicking on different parts of it performs various commands)



** The Menu Bar

- Normally at the top of each /frame/.
- Can be used to *perform common operations*.
  - (If using Emacs in a *graphical window*, you can use the mouse to choose a command).
  - (An *arrow on the right edge of a menu item* means it leads to a *subsidiary menu* (or a /submenu/))
  - (A =...= *at the end of of a menu item* means that the command will *prompt you*)
  - (Some commands in it have *ordinary key bindings* as well \rightarrow Indicated on the right edge of the menu item)


| Key     | Command         | Description                                                                                                                                                                     |
|---------+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-h k= |                 | /Can be used to/ view the *full command name* and *documentation* of a menu item (Click on the menu item when prompted)                                                         |
| =F10=   | =menu-bar-open= | Invoke the *first menu bar item* \rightarrow Navigate with the *arrow keys* thereafter, =RET= to activate selected menu item, =C-g= or =ESC ESC ESC= to cancel menu navigation. |

- (Since Emacs is built with a *GUI toolkit*, the menus are drawn and controlled by the toolkit and the *keys sequences to cancel menu navigation may differ*)
  - (E.g., a single =ESC= is sufficient in a graphical window frame)


| =M-`=   | =tmm-menubar=   | Access the *menu bar in the echo area* and *select a menu item with the keyboard*.                                                                                              |

- (A buffer named =*Completions*= up opens and shows the *possible inputs to enter* in the minibuffer)
- (A *provisional choice* is displayed in the echo area)
- (Use *up or down arrow keys +* =RET= or *type the character* before the ====>= to *select a menu item*)
- (=tmm-menu= menu items are *mouse-sensitive*)
- (Set =tty-menu-open-use-tmm= to a non-nil value and =F10= *will run the command* =tmm-menu-bar= *instead of dropping down the menu*)


* Characters, Keys and Commands

- *Character sets* used by Emancs for *input commands*
- /keys/ and /commands/ \rightarrow Whereby Emacs interprets your keyboard and mouse input

** Kinds of User Input

- Emacs \rightarrow Primarily desinged for use with the *keyboard*
  - (Mouse, menu bar and tool bar usage is not as efficient as the keyboard)
  - (This manual mainly documents how to edit with the keyboard)


- _Keyboard input Emacs based on a heavily-extended version of ASCII_
  - *Simple characters* (e.g., =a=, =3=, =SPC=) are *entered by typing the corresponding key*
  - *Control characters* (e.g., =RET=, =TAB=, =DEL=, =ESC=, =F1=, =Home=, =LEFT=) *as well* \rightarrow Result examples: =^[[3~=, =^[=, =^[[D= (type =$ cat= in your shell to see them)
  - (+ certain characters on non-English keyboards)

- + *control characters entered using modifier keys* are also recognized \rightarrow E.g., =Control= and =META=
  - E.g. =Control-a= or =C-a=, =META-a= or =M-a=
  - (Modifier keys can also be applied to non-alphanumerical characters \rightarrow E.g., =C-F1=, =M-Left=)
  - (=Alt= is referred as =META= for historical reasons)

- (Meta characters can also be entered using *two-character sequences* starting with =ESC= \rightarrow E.g., =M-a= \logeq =ESC a=, =C-M-a= \logeq =ESC C-a= (since =C-M-a \logeq =M-C-a=)
  - (Only useful when the =META= key does not function reliably)

- (On graphical displays, the *window manager might block some keyboard inputs* \rightarrow Often including =M-TAB=, =M-SPC=, =C-M-d=, =C-M-l=)
  - (\rightarrow Customize your window mangager or rebind the affected commands)


- _Simple characters and control characters (+ certain non-keyboard inputs like mouse clicks) = Input events_
  - (See section "Input events" in Elisp Ref Manual to learn how Emacs interally handles input events)


** Keys

- _Key sequence: a sequence of one or more input events that is meaningful as a unit_
  - E.g., =C-f= invokes =forward-char=
  - E.g., =C-x 4 C-f= invokes =find-file-other-window=

- !!! _Key is the abbreviation of Key sequence_

- _Every key sequence is either a complete key or a prefix key_
  - If a key sequence invokes a command, it is called a *complete key* \rightarrow E.g., =C-x C-f=, =C-x 4 C-f=
    - (Once complete, a key cannot receive more input events \rightarrow E.g., =C-f C-k= is a two key sequence, not one

  - If a key sequence is not long enough to invoke a command, it is called a *prefix key* \rightarrow E.g., =C-x=, =C-x 4=
    - (A prefix key combines with the following input event to make a longer key sequence (\implies either complete or still prefix))

  - (If a key sequence fails, it is called an *invalid key [sequence]*)


- _A key sequence that take n input events to be complete is called a n-event key sequence_

- (Number of events in a key sequence is not limited but it seldom reaches more than 3-4 inputs)


- Prefix keys in Emacs by default:

| =C-c=                   |
| =C-h=                   |
| =C-x=                   |
| =RET=                   |
| =C-x {@,a,n,r,v,4,5,6}= |
| =ESC=                   |
| =M-g=                   |
| =M-o=                   |

- (=F1= is an alias of =C-h= AND =F2= is an alias of =C-x 6=)
- (List not cast in stone: can be customized to *add new prefix keys* but *avoid to remove one of them* (since it can break existing complete keys))


| Key                | Description                                  |
|--------------------+----------------------------------------------|
| prefix key + =C-h= | List the commands starting with /prefix key/ |

- (_Exception_: prefix key cannot be =ESC= since =ESC C-h= \logeq =C-M-h= (which invokes =mark-defun=))
  - (Use the aliased =F1= key instead \rightarrow =ESC F1=)


** Keys and Commands

- !!! _Emacs assings meaning to named commands, and then gives keys to their meanings by binding them to commands_
  - \rightarrow Emacs does not assign meanings to keys directly

- Every command has a *name* chosen by a programmer \rightarrow Usually english words separated by dashes (e.g., =forward-char=)
  - Internally, each command is a *special type of Lisp function* \rightarrow Its actions are performed by running it (See "What is a Function" in Elisp Ref Manual)

- The binding between keys and commands are recorded in tables called *keymaps*

- "=C-n= moves down vertically one line" is *not correct strictly speaking* (language abuse is tolerated)
  - Instead, =C-n= is *bound to the command* =next-line=, which *moves point vertically downward*
  - \rightarrow Powerful concept that allows users to give any key the behavior they want
  - (In this manual, the name of the command which really does the work is usually *between parentheses* after mentioning the key that runs it)


- _Variable: a name used to store a value_
  - Often command descriptions will say: "To change this, set the variable =mumble-foo="
  - Most variables documented in this manual are meant for *customization*
  - Commands or other parts of Emacs will *examine the variable* and *alter their behavior accordingly*
  - (See dedicated section "Variables")


* Entering and Exiting Emacs


** Entering Emacs

- *Classic:* =$ emacs=

- *In the background:* =$ emacs&;= \rightarrow Useful if runned from a terminal in a graphical window (since it won't tie up to the terminal window)

- *Visit one or more files (as soon as starting up):* =$ emacs foo.txt
  - _This feature exists mainly for compatibility with other editors (which are often designed to be launched from the shell for short editing sessions)_
    - (E.g., compatility needed with for the shell default text editor to be launched by default)

  - The initial frame will be split into 2 windows: one displaying the *first file of the list* and the other displaying the *startup screen*.

  - _Generally, it is unnecessary and wasteful to start Emacs afresh each time you want to edit a file_
    - \rightarrow _Recommanded: start it just once (just after you log in) and do all your editing in the same session_
    - This way, the Emacs session *accumulates valuable context* \rightarrow E.g., kill ring, registers, undo history, mark ring data


- When Emacs starts up, the *initial frame* displays a special buffer named =*GNU Emacs*=
  - (This /startup screen/ contains useful information and links to commons tasks for beginning users)

  - A link can be followed by:
    - Placing the point on it + =RET=
    - Pressing =mouse-1= on it

  - (If the variable =inhibit-startup-screen= is non-=nil=, Emacs does *not display this startup screen*)
    - (A buffer named =*scratch*= is displayed if no file was passed as argument \rightarrow Can be used to *evaluate Emacs Lisp expressions interactively* (See Section Lisp Interaction)
    - (Can be set in *your init file* (or using the Customize facility) \rightarrow See dedicated sections)
  
  - (The variable =initial-buffer-choice= can be set to string naming a file or a directory)
    - (Can also be set to a function (of no argument) that should return a buffer)
    - (If set to non-=nil=, file names passed as argument will be visited but not displayed)

- To edit a file *from another program while Emacs is running*, use the =emacsclient= helper to open a file in the existing session

- (See Appendix C [Emacs Invocation] to see other available arguments)



** Exiting Emacs


| Key       | Command                      | Description                                                                              |
|-----------+------------------------------+------------------------------------------------------------------------------------------|
| =C-x C-c= | =save-buffers-kill-terminal= | /Kill/ Emacs (= Terminate the Emacs program) with confirmations                          |
| -         | =kill-emacs=                 | Kill Emacs without confirmation                                                          |
| =C-z=     | =suspend-frame=              | _Text terminal:_ suspend Emacs; _Graphical display:_ iconify/minimize the selected frame |


- (Multiple-character key sequences are often bound to commands that one *would not want to type by accident*)

- A buffer that corresponds to a file on disk can be qualified as /file-visiting/.


- _=save-buffers-kill-terminal=:_
  - If there are any *modified file-visting buffer*, =save-buffers-kill-terminal= offers you to save these buffers
    - It asks for confirmation again if you *do not save any*
    - It also asks for confirmation if *subprocesses are still running* (since Emacs is the parent process)

  - =save-buffers-kill-terminal= behaves specially if using Emacs as a *server*
    - + It closes connection if you type it from a client

  - Optionally, Emacs can record *certain session information* when you kill it for later sessions \rightarrow E.g., files you were visiting
    - _Variables:_
      - (If the value of  =confirm-kill-emacs= is set to non-=nil= (default value is =nil=), =save-buffers-kill-terminal= assumes that its value is a *predicate function* and calls it)
	- (If it returns a non-=nil=, the session is killed; otherwise Emacs continues to run)
	- (=yes-or-no-p= is one convenient function to use)
      - (If the value of =confirm-kill-processes= is set to =nil= (default value: =t=), =save-buffers-kill-terminal= does not ask for confimation when killing subprocesses)

  - (See Section "Killing Emacs" in the Elisp Ref Manual)


- _=suspend-frame=:_
  - _On graphical display:_  hides the frame in a way that let you *bring it back later*
    - (Exactly how this hiding occurs depends on the window system)
  - _On text terminal:_ /suspends/ Emacs; stoppping the program temporarily and returning control to the parent process (a shell most of the time)
    - =$ fg = or =$ emacs%= to resume (in most shells)

  - Text terminals usually *listen for certain special characters whose meaning is to send signals* to the program you are running \rightarrow E.g., =^C=, =^Z^=
    - _This terminal feature is turned off while you are in Emacs_
    - =C-x C-c= and =C-z= keys are inspired by the use of similar combinations on several OS but *that is their only relationship with the OS*



* Basic Editing Commands

- Basic editing commands can be learnt in the *Emacs learn-by-doing tutorial*


** Inserting Text

- Insert any ordinary /graphic character/ (e.g., =a=, =B=, =3=) by typing the associated key
  - (\rightarrow Passed as argument to =self-insert-command=)
  - (Insertion *moves point forward* to keep it *after* the inserted text)

- =RET= invokes =newline=: insert =newline character= + indent according to major mode
- (If point at *end of line*: blankline just after + indent)
  - (If point at *middle of line*: line is split at point + indent)

- /Auto-identation/ can be turned off by disabling *Electic Indent mode*
- =C-j= invokes =electric-newline-and-maybe-indent= \rightarrow No indent by default


- The way text insertion is handled can be changed by *toggling minor modes*
  - E.g., *Auto Fill mode* splits lines automatically when too long, *Overwrite mode* causes inserted characters overwriting existing text

- *Only graphic characters can be inserted by typing the associated key*
- *Other characters act as editing commands* and do not insert any byte in the buffer
  - (E.g., =DEL= invokes =delete-backward-char= (some modes bind it to different one) \neq Insert a literal =DEL= character (ASCII 127))


- Insert a non-graphic or any character that is not supported by your keyboard by */quoting/ it*

| Key   | Command         | Description                                                                                                                                   |
|-------+-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------|
| =C-q= | =quoted-insert= | Read next input character and insert it. This is useful for inserting control character. With argument, insert /ARG/ copies of the character. |

- Two ways of using =C-q=:
  1) =C-q= + any non-graphic character (even =C-g=) = *Inserts that character*
     - (E.g., =C-q DEL= inserts a literal =DEL= character)

  2) =C-q= + a sequence of octal digits + any non-digit to terminate (even =RET=; nothing special) = *Inserts the character with the specified octal character code*
     - (E.g., =C-q 1 0 1 B= inserts =AB=)
     - *Disabled in Overwrite mode* \rightarrow =C-q= can be used instead to *insert a character* (+ octal digits are not handled specially)
     
     - _Variables:_
       - You can change the /radix/ (= the base of a system of numeration) by setting =read-quoted-char-radix= \rightarrow E.g., 10, 16
	 - (When using hexadecimal, a-f character can be typed (case ignored))


- *Common Unicode characters can be inserted more conveniently* (than quoting them) with the prefix key =C-x 8=

| Key       | Character | Code-point | Unicode name                                               |
|-----------+-----------+------------+------------------------------------------------------------|
| =C-x 8 [= | ‘         | U+2018     | LEFT SINGLE QUOTATION MARK ("curved quote", "curly quote") |
| =C-x 8 ]= | ’         | U+2019     | RIGHT SINGLE QUOTATION MARK                                |
| =C-x 8 {= | “         | U+201c     | LEFT DOUBLE QUOTATION MARK                                 |
| =C-x 8 }= | ”         | U+201d     | RIGHT DOUBLE QUOTATION MARK                                |

| Key         | Command       | Description                                                                                               |
|-------------+---------------+-----------------------------------------------------------------------------------------------------------|
| =C-x 8 RET= | =insert-char= | Insert /COUNT/ copies of /CHARACTER/. Interactively prompt for /CHARACTER/ (multiple ways to specify it). |
| =C-x 8 C-h= | -             | Key translations starting with =C-x 8=                                                                    |

- =insert-char= can take either *code-point* (hex by default (the convention for Unicode); or other with specified radix (e.g., =#o23072=)) or *Unicode name*
  - \rightarrow *Provides completion* (*like most commands*) for Unicode names (e.g., =C-x 8 RET left sin TAB RET=)
  - (See Section /Integer Basics/ in the Elisp Ref Manual)

- In some contexts, if quotation (simple or double) is typed using ` and ', it is converted to a form using quotation marks (c.f., Electric Quote mode)
  - (See Section /Quotation Marks/)

- (A functional =Alt= key (\neq =Meta=) acts like =C-x 8= \rightarrow E.g.,  =A-[= \logeq =C-x 8 [=)


